// Generated by CoffeeScript 1.6.3
(function() {
  var Board, Canvas, Parser, StatusBar, Unit, Websocket, World, getCanvas, main;

  Board = (function() {
    var COLOR_BORDER, COLOR_LINE, HEIGHT, WIDTH;

    WIDTH = 600;

    HEIGHT = 600;

    COLOR_BORDER = 'RGB(100, 0, 240)';

    COLOR_LINE = 'RGB(100, 0, 240)';

    function Board(size) {
      this.size = size;
    }

    Board.prototype.radius = function() {
      return WIDTH / this.size / 2.0 - 3;
    };

    Board.prototype.position2point = function(pos) {
      var heightUnit, widthUnit, x, y;
      if (pos.x < 0 || pos.x >= this.size || pos.y < 0 || pos.y >= this.size) {
        return {
          x: -1,
          y: -1
        };
      }
      widthUnit = WIDTH / this.size;
      heightUnit = HEIGHT / this.size;
      x = -WIDTH / 2 + pos.x * widthUnit + widthUnit / 2;
      y = -HEIGHT / 2 + pos.y * heightUnit + heightUnit / 2;
      return {
        x: x,
        y: -y
      };
    };

    Board.prototype.render = function(canvas) {
      var heightUnit, i, widthUnit, x1, y1, _i, _ref, _results;
      canvas.drawRect(COLOR_BORDER, {
        x: -WIDTH / 2,
        y: -HEIGHT / 2,
        w: WIDTH,
        h: HEIGHT
      });
      widthUnit = WIDTH / this.size;
      heightUnit = HEIGHT / this.size;
      _results = [];
      for (i = _i = 1, _ref = this.size; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        i = i - this.size / 2;
        x1 = i * widthUnit;
        y1 = i * heightUnit;
        canvas.drawLine(COLOR_BORDER, x1, -HEIGHT / 2, x1, HEIGHT / 2);
        _results.push(canvas.drawLine(COLOR_BORDER, -HEIGHT / 2, y1, HEIGHT / 2, y1));
      }
      return _results;
    };

    return Board;

  })();

  Canvas = function(ctx, w, h) {
    this.ctx = ctx;
    this.w = w;
    return this.h = h;
  };

  Canvas.prototype.fillRect = function(color, rect) {
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(this.xscreen(rect.x), this.yscreen(rect.y), rect.w, rect.h);
  };

  Canvas.prototype.drawRect = function(color, rect) {
    this.ctx.strokeStyle = color;
    return this.ctx.strokeRect(this.xscreen(rect.x), this.yscreen(rect.y), rect.w, rect.h);
  };

  Canvas.prototype.drawLine = function(color, sx, sy, ex, ey) {
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(this.xscreen(sx), this.yscreen(sy));
    this.ctx.lineTo(this.xscreen(ex), this.yscreen(ey));
    return this.ctx.stroke();
  };

  Canvas.prototype.drawArc = function(color, x, y, r, sAngle, eAngle) {
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(this.xscreen(x), this.yscreen(y), r, sAngle, eAngle);
    return this.ctx.stroke();
  };

  Canvas.prototype.fillArc = function(color, x, y, r, sAngle, eAngle) {
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(this.xscreen(x), this.yscreen(y), r, sAngle, eAngle);
    return this.ctx.fill();
  };

  Canvas.prototype.drawCircle = function(color, x, y, r) {
    return this.drawArc(color, x, y, r, 0, 2 * Math.PI);
  };

  Canvas.prototype.fillCircle = function(color, x, y, r) {
    return this.fillArc(color, x, y, r, 0, 2 * Math.PI);
  };

  Canvas.prototype.drawText = function(color, font, text, x, y) {
    this.ctx.fillStyle = color;
    this.ctx.font = font;
    x = x - this.ctx.measureText(text).width / 2;
    return this.ctx.fillText(text, this.xscreen(x), this.yscreen(y));
  };

  Canvas.prototype.clear = function() {
    return this.ctx.clearRect(0, 0, this.w, this.h);
  };

  Canvas.prototype.xscreen = function(x) {
    return x + this.w / 2;
  };

  Canvas.prototype.yscreen = function(y) {
    return y + this.h / 2;
  };

  getCanvas = function() {
    var c, ctx, height, ratio, ratioh, ratiow, width;
    width = 1280.0;
    height = 800.0;
    c = document.getElementById("chess-board");
    ctx = c.getContext("2d");
    c.width = window.innerWidth;
    c.height = window.innerHeight;
    ratiow = c.width / width;
    ratioh = c.height / height;
    if (ratiow < ratioh) {
      ratio = ratiow;
      c.height = height * ratio;
    } else {
      ratio = ratioh;
      c.width = width * ratio;
    }
    ctx.scale(ratio, ratio);
    return new Canvas(ctx, width, height);
  };

  main = function() {
    var canvas, parser, status_bar, world, ws;
    canvas = getCanvas();
    world = new World(canvas);
    status_bar = new StatusBar;
    parser = new Parser(world, status_bar);
    ws = new Websocket(parser);
    return ws.connect();
  };

  $(function() {
    return main();
  });

  Parser = (function() {
    var STATE_BOARD_UPDATED, STATE_GAMEOVER_FOR_WATCHER, STATE_GAMEOVER_LOSE, STATE_GAMEOVER_WIN, STATE_ILLEGAL_OPERATION, STATE_OPPOENENT_ABORT, STATE_OPPOENENT_GIVEUP, STATE_READY, STATE_WAIT;

    STATE_WAIT = 0;

    STATE_READY = 1;

    STATE_ILLEGAL_OPERATION = 2;

    STATE_BOARD_UPDATED = 3;

    STATE_OPPOENENT_ABORT = 4;

    STATE_OPPOENENT_GIVEUP = 5;

    STATE_GAMEOVER_WIN = 6;

    STATE_GAMEOVER_LOSE = 7;

    STATE_GAMEOVER_FOR_WATCHER = 8;

    function Parser(world, status_bar) {
      this.world = world;
      this.status_bar = status_bar;
    }

    Parser.prototype.parse = function(data) {
      var game_state;
      game_state = JSON.parse(data);
      if (game_state.state === STATE_WAIT) {
        this.status_bar.render("waiting for another player");
        return;
      }
      if (game_state.state === STATE_READY) {
        this.status_bar.render("opponent found, game start!");
        this.world.init_units(game_state.boardInfo);
        this.world.render();
        return;
      }
      if (game_state.state === STATE_OPPOENENT_ABORT) {
        this.status_bar.render("opponent leave suddenly, waiting for another player...");
      }
    };

    return Parser;

  })();

  StatusBar = (function() {
    function StatusBar() {
      console.log("super");
    }

    StatusBar.prototype.render = function(text) {
      return $("#status-bar").html(text);
    };

    return StatusBar;

  })();

  Unit = (function() {
    var COLOR_CIRCLE, COLOR_UNIT_BLACK, COLOR_UNIT_WHITE;

    COLOR_CIRCLE = 'RGB(244, 122, 2)';

    COLOR_UNIT_BLACK = 'RGB(0, 0, 0)';

    COLOR_UNIT_WHITE = 'RGB(255, 255, 255)';

    function Unit(board, side, value, pos) {
      this.board = board;
      this.side = side;
      this.value = value;
      this.pos = pos;
    }

    Unit.prototype.render = function(canvas) {
      var point, r;
      point = this.board.position2point(this.pos);
      r = this.board.radius();
      if (this.side === 1) {
        canvas.drawCircle(COLOR_CIRCLE, point.x, point.y, r);
        canvas.fillCircle(COLOR_UNIT_BLACK, point.x, point.y, r);
        return canvas.drawText(COLOR_UNIT_WHITE, "80px Arial", this.value, point.x, point.y + 30);
      } else {
        canvas.drawCircle(COLOR_CIRCLE, point.x, point.y, r);
        return canvas.drawText(COLOR_UNIT_BLACK, "80px Arial", this.value, point.x, point.y + 30);
      }
    };

    return Unit;

  })();

  Websocket = (function() {
    var WS_HOST;

    WS_HOST = "ws://localhost:7200";

    function Websocket(parser) {
      this.ws_conn = null;
      this.parser = parser;
    }

    Websocket.prototype.connect = function() {
      var _parser;
      if (this.ws_conn !== null) {
        return;
      }
      _parser = this.parser;
      this.ws_conn = new WebSocket(WS_HOST + "/ws");
      this.ws_conn.onopen = function(data) {
        return console.log(data);
      };
      this.ws_conn.onmessage = function(msg_event) {
        var data;
        console.log(msg_event.data);
        data = msg_event.data;
        return _parser.parse(data);
      };
      this.ws_conn.onclose = function(data) {
        return alert("close");
      };
      return this.ws_conn.onerror = function(data) {
        return alert("error");
      };
    };

    Websocket.prototype.send = function(data) {
      if (this.ws_conn === null) {
        this.connect();
      }
      return this.ws_conn.send(data);
    };

    return Websocket;

  })();

  World = (function() {
    function World(canvas) {
      this.canvas = canvas;
      this.objects = [];
      this.board = new Board(6);
      this.units = [];
    }

    World.prototype.init_units = function(board_info) {
      var unit, _i, _len, _ref, _results;
      this.units = [];
      _ref = board_info.Units;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        _results.push(this.units.push(new Unit(this.board, unit.side, unit.value, {
          x: unit.pos.X,
          y: unit.pos.Y
        })));
      }
      return _results;
    };

    World.prototype.render = function() {
      var unit, _i, _len, _ref, _results;
      this.canvas.clear();
      this.board.render(this.canvas);
      _ref = this.units;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        _results.push(unit.render(this.canvas));
      }
      return _results;
    };

    return World;

  })();

}).call(this);
